(()=>{"use strict";var t,e,i,s,a,n,o,r,c,h,d,p,l,u,m,y,f,v,x={349:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Draw=void 0;var i=function(){function t(t,e,i){this.map=t,this.snake=e,this.eat=i}return t.prototype.drawMap=function(){var t=this.map.width;this.ctx.strokeStyle="#333",this.ctx.fillStyle="orange",this.ctx.lineWidth=this.map.strokeWidth;for(var e=0;e<this.map.map.length;e++)for(var i=0;i<this.map.map[e].length;i++)this.ctx.strokeRect(e*t,i*t,t,t)},t.prototype.initCanvas=function(){var t;this.canvas=document.createElement("canvas"),this.canvas.setAttribute("id","canvas"),this.canvas.setAttribute("width","600px"),this.canvas.setAttribute("height","600px"),null===(t=document.getElementById("wrapper"))||void 0===t||t.appendChild(this.canvas),this.width=this.map.size*this.map.width+this.map.size*this.map.strokeWidth,this.canvas=document.getElementById("canvas"),this.canvas.style.width=this.width+"px",this.canvas.style.height=this.width+"px",this.ctx=this.canvas.getContext("2d")},t.prototype.drawSnake=function(){var t=this,e=this.map.width,i={x:this.snake.parts[this.snake.parts.length-1].coords.x,y:this.snake.parts[this.snake.parts.length-1].coords.y};return this.ctx.fillStyle="orange",this.snake.parts.forEach((function(i){t.ctx.fillRect(i.coords.x*e+5,i.coords.y*e+5,e-10,e-10)})),i},t.prototype.drawEat=function(){var t=this,e=new Image;e.src="src/images/apple2.png",this.eat.eats.forEach((function(i,s,a){e.onload=function(){t.ctx.drawImage(e,i.coords.x*t.widthPoly,i.coords.y*t.widthPoly,50,50)}}))},t.prototype.animate=function(){var t=this,e=this.drawSnake();this.snake.isCollided&&this.gameOver(),this.raf=requestAnimationFrame((function(){setTimeout((function(){t.clearPos(e.x,e.y),t.drawMap(),t.snake.move(),t.animate()}),200),t.drawEat()}))},t.prototype.gameOver=function(){cancelAnimationFrame(this.raf)},t.prototype.clearPos=function(t,e){this.ctx.clearRect(t*this.widthPoly,e*this.widthPoly,this.widthPoly,this.widthPoly)},t.prototype.updateEatPos=function(){var t=this;setInterval((function(){0!==t.eat.eats.length&&t.eat.eats.forEach((function(e,i,s){t.clearPos(e.coords.x,e.coords.y),t.map.clearObject(e.coords.x,e.coords.y)}));do{t.eat.eats=t.eat.generate(t.snake.parts)}while("string"==typeof t.eat.eats);t.eat.eats.forEach((function(e,i,s){t.map.setObject(e.coords.x,e.coords.y,e)}))}),3e3)},t}();e.Draw=i},779:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Eat=void 0;var i=function(){function t(t,e){this.size=t,this.width=e,this.eats=[]}return t.prototype.generate=function(t){var e=!1,i=[],s=this.generateCoords();null==t||t.forEach((function(t){t.coords.x===s.x&&t.coords.y===s.y&&(e=!0)}));var a={coords:s,type:"apple"};return e?"closed":(i.push(a),i)},t.prototype.generateCoords=function(){return{x:Math.floor(Math.random()*(this.size-1)),y:Math.floor(Math.random()*(this.size-1))}},t}();e.Eat=i},58:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GameOver=void 0;var i=function(){function t(){}return t.prototype.createAlert=function(t,e){var i=document.getElementById("wrapper"),s=document.createElement("div"),a=document.createElement("h3"),n=document.createElement("p");n.classList.add("alertMsg"),a.classList.add("alertTitle"),s.classList.add("gameover"),a.innerText="Game Over!",n.innerText="Your result is "+e+" for  "+t.min+" : "+t.sec,s.appendChild(a),s.appendChild(n),null==i||i.appendChild(s)},t.prototype.saveResult=function(t,e){var i={name:"You",score:t,time:e},s=JSON.parse(localStorage.getItem("results"));s.push(i),localStorage.setItem("results",JSON.stringify(s))},t}();e.GameOver=i},587:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.InitGame=void 0;var i=function(){function t(t,e,i,s){this.map=t,this.draw=e,this.width=i,this.score=s}return t.prototype.init=function(){localStorage.setItem("results",JSON.stringify([])),this.map.generateMap(),this.draw.initCanvas(),this.draw.widthPoly=this.width,this.draw.drawMap(),this.draw.animate(),this.draw.updateEatPos(),this.score.startGame(),this.score.startGame(),this.score.buildHTML()},t}();e.InitGame=i},506:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Map=void 0;var i=function(){function t(t,e,i){this.size=t,this.width=e,this.strokeWidth=i,this.map=[]}return t.prototype.generateMap=function(){for(var t=0;t<this.size;t++){this.map.push([]);for(var e=0;e<this.size;e++){var i={x:t,y:e,contains:null,isEmpty:!0};this.map[t].push(i)}}},t.prototype.setObject=function(t,e,i){this.map[t][e].contains=i,this.map[t][e].isEmpty=!1},t.prototype.clearObject=function(t,e){this.map[t][e].contains=null,this.map[t][e].isEmpty=!0},t.prototype.checkStep=function(t,e){return!this.map[t][e].isEmpty&&this.map[t][e].contains},t}();e.Map=i},315:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MainMenu=void 0;var i=function(){function t(t){this.initGame=t,this.items=["Start","About","Option","Records"],this.itemsHTML=[]}return t.prototype.createMenu=function(){this.container=document.createElement("div");var t=document.createElement("ul"),e=document.getElementById("wrapper");console.log("sdsadssad",e,t,this.container),t.classList.add("gamemenu"),this.container.classList.add("container"),this.container.appendChild(t);for(var i=0;i<this.items.length;i++){var s=document.createElement("li"),a=document.createTextNode(this.items[i]);s.classList.add("menuitem"),s.appendChild(a),t.appendChild(s),this.itemsHTML.push(s)}null==e||e.appendChild(this.container),this.addEventClick()},t.prototype.clearMenu=function(){var t;null===(t=this.container.parentNode)||void 0===t||t.removeChild(this.container)},t.prototype.addEventClick=function(){var t=this;this.itemsHTML.forEach((function(e){e.addEventListener("click",(function(i){var s=new Event("changePage",{bubbles:!0,cancelable:!1}),a=i.target.innerText;console.log(i,a),"Start"===a&&(t.clearMenu(),t.initGame.init(),e.dispatchEvent(s))}))}))},t}();e.MainMenu=i},744:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Score=void 0;var i=function(){function t(t,e){this.snake=t,this.go=e,this.time={sec:0,min:0}}return t.prototype.startGame=function(){var t=this,e=setInterval((function(){t.snake.isCollided?(console.log("stopedddd"),t.go.createAlert(t.time,t.score),clearInterval(e)):(t.score=t.snake.score,t.startTimer(),t.updateHTML(),console.log(t.time))}),1e3)},t.prototype.startTimer=function(){60===this.time.sec&&(this.time.sec=0,this.time.min+=1),this.time.sec+=1},t.prototype.buildHTML=function(){var t=document.getElementById("wrapper"),e=document.createElement("div");this.timerText=document.createElement("h3"),this.timerText.classList.add("timer"),this.scoreText=document.createElement("h3"),this.scoreText.classList.add("score"),e.classList.add("scoreContainer"),t.appendChild(e),e.appendChild(this.timerText),e.appendChild(this.scoreText)},t.prototype.updateHTML=function(){var t=this.time.sec<10?"0"+this.time.sec:this.time.sec,e=this.time.min<10?"0"+this.time.min:this.time.min;this.timerText.innerText="Time "+e+" : "+t,this.scoreText.innerText="Score "+this.score},t}();e.Score=i},109:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Snake=void 0;var i=function(){function t(t,e){this.map=t,this.eat=e,this.isCollided=!1,this.score=0,this.Head={coords:{x:5,y:5},type:"snake",index:0},this.parts=[this.Head],this.speed=1,this.direction="left"}return t.prototype.growSnake=function(t,e){var i={coords:{x:t,y:e},type:"snake",index:this.parts.length-1};this.parts.push(i)},t.prototype.move=function(){var t=this;if(!this.isCollided){var e=this.parts[this.parts.length-1];this.map.clearObject(e.coords.x,e.coords.y),this.chainCoords();var i=this.parts[0].coords;switch(this.direction){case"left":i.x-=this.speed;break;case"right":i.x+=this.speed;break;case"top":i.y-=this.speed;break;case"bottom":i.y+=this.speed}if(i.x>11?i.x=0:i.x<0&&(i.x=11),i.y>11?i.y=0:i.y<0&&(i.y=11),this.map.checkStep(i.x,i.y)){var s=this.map.checkStep(i.x,i.y);switch(s.type){case"apple":this.eaten(s);break;case"snake":this.isCollided=!0}}this.parts.forEach((function(e){t.map.setObject(e.coords.x,e.coords.y,e)}))}},t.prototype.eaten=function(t){var e=this.parts[this.parts.length-1];this.map.clearObject(t.coords.x,t.coords.y),this.eat.eats=[],this.score++,console.log(this.parts.length),this.growSnake(e.coords.x,e.coords.y)},t.prototype.keyPress=function(t){var e=this;t.addEventListener("keydown",(function(t){switch(t.key){case"ArrowRight":"left"!==e.direction&&(e.direction="right");break;case"ArrowUp":"bottom"!==e.direction&&(e.direction="top");break;case"ArrowDown":"top"!==e.direction&&(e.direction="bottom");break;case"ArrowLeft":"right"!==e.direction&&(e.direction="left")}}))},t.prototype.chainCoords=function(){this.Head;for(var t={x:null,y:null},e={x:null,y:null},i=0;i<this.parts.length;i++)e.x=this.parts[i].coords.x,e.y=this.parts[i].coords.y,0!==i&&(this.parts[i].coords.x=t.x,this.parts[i].coords.y=t.y),t.x=e.x,t.y=e.y},t}();e.Snake=i}},g={};function w(t){var e=g[t];if(void 0!==e)return e.exports;var i=g[t]={exports:{}};return x[t](i,i.exports,w),i.exports}d=w(58),p=w(744),l=w(587),u=w(315),m=w(779),y=w(506),f=w(349),v=w(109),t||(t={}),e=new y.Map(12,50,4),i=new m.Eat(12,50),s=new d.GameOver,a=new v.Snake(e,i),n=new f.Draw(e,a,i),o=new p.Score(a,s),r=new l.InitGame(e,n,50,o),c=new u.MainMenu(r),new(function(){function t(t){this.menu=t,this.score=0,this.gameStarted=!1,this.gameStarted||(console.log("init page"),this.initStartPage())}return t.prototype.initStartPage=function(){this.menu.createMenu()},t}())(c),h=document.getElementsByTagName("body")[0],a.keyPress(h)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,